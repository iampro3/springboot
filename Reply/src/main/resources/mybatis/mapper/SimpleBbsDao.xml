<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.study.springboot.dao.ISimpleBbsDao">
	
	<resultMap id="bbsResult" type="SimpleBbsDto">
		<result column="id" property="id" />
		<result column="writer" property="writer" />
	</resultMap>
	
	<select id="listDao2" resultMap="bbsResult">
		select * from simple_bbs
	</select>
	
	<select id="listDao" resultType="com.study.springboot.dto.SimpleBbsDto">
		select 
			* 
		from 
			simple_bbs
		order by 
			id desc
	</select>

	<select id="listWithDepthDao" resultType="com.study.springboot.dto.SimpleBbsDto">
	<!-- 	with td_recu (lv, TODO_ID, TODO, DUE_DATE, DONE_DATE, USER_ID, PARENT_ID) as (
		    select  
		        1 as lv,
		        TODO_ID, TODO, DUE_DATE, DONE_DATE, USER_ID, PARENT_ID
		    from 
		        tb_todo
		    where 
		        parent_id is null
		    
		    union all
		        
		    select
		        t.lv + 1 as lv,
		        td.TODO_ID, 
		        lpad(' + ', t.lv ,' + ') || td.TODO, 
		        td.DUE_DATE, 
		        td.DONE_DATE, td.USER_ID, td.PARENT_ID
		    from td_recu t
		    left outer join tb_todo td on td.parent_id = t.TODO_ID
		    where td.parent_id is not null
		)
		search depth first by (TODO_ID) set sort_TODO_ID
		select * from td_recu
		order by sort_TODO_ID -->
		
		<!-- simplebbs로 가져오기 -->
			with bbs_recu (lv, id, writer, title, content, parent_id) as (
			    select  
			        1 as lv,
			        id, writer, title, content, parent_id
			    from 
			        simple_bbs
			    where 
			        parent_id is null
			    
			    union all
			    
			    select
			        r.lv + 1 as lv,
			        bbs.id, bbs.writer, 
			        bbs.title, 
			        bbs.content, bbs.parent_id
			    from bbs_recu r
			    left outer join simple_bbs bbs on bbs.parent_id = r.id
			    where bbs.parent_id is not null
			)
			search depth first by id desc set sort_id
			select * from bbs_recu
			order by sort_id
	</select>
	
	<select id="test_listDao" resultType="com.study.springboot.dto.SimpleBbsDto">
			select 
				* 
			from 
				simple_bbs
			where
				<![CDATA[ id < 3 ]]>
			order by 
				id desc
	</select>

	<select id="viewDao" 
		parameterType="string"
		resultType="com.study.springboot.dto.SimpleBbsDto">
		
		select * from simple_bbs where id = #{param1}
	</select>

	<update id="writeDao">
		insert into simple_bbs (id, writer, title, content, parent_id)
		values (simple_bbs_seq.nextval, #{param1}, #{param2}, #{param3}, #{param4})
	</update>
	
	<delete id="deleteDao" parameterType="string">
		DELETE FROM simple_bbs WHERE id = #{_parameter}
	</delete>
	
	<update id="updateDao" parameterType="SimpleBbsDto">
		UPDATE 
				simple_bbs
		   SET 
				writer = #{writer},
				title = #{title},
				content = #{content}
		 WHERE 
		 		id = #{id}
	</update>
	
	
	<select id="testIf"
		parameterType="SimpleBbsDto"
		resultType="SimpleBbsDto">
		
		select 
			* 
		from 
			simple_bbs
		<where>
			<if test=" title != null and title != '' ">
				and upper(title) = upper(#{title})
			</if>
			<if test=" writer != null and writer != '' ">
<!-- 				and upper(writer) = upper(#{writer}) -->
				and upper(writer) like '%' || upper(#{writer}) || '%'
			</if>
		</where>
		order by 
			id desc
	</select>
	
	<select id="testChoose"
		parameterType="SimpleBbsDto"
		resultType="SimpleBbsDto">
		
		SELECT 
			* 
		FROM 
			simple_bbs
		<where>
			<choose>
				<when test=" title != null and title != '' ">
					AND title = #{title}
				</when>
				<otherwise>
					AND title IS NULL
				</otherwise>
			</choose>
		</where>
		
	</select>
	
	
	<select id="testForeach"
		parameterType="SimpleBbsDto"
		resultType="SimpleBbsDto">
		
		SELECT 
			* 
		FROM 
			simple_bbs
		<where>
			<if test="chk != null">
				id in 
				<foreach 
					item="value" 
					collection="chk" 
					open="("
					separator=","
					close=")">
					
					#{value}
					
				</foreach>
			</if>
		</where>
	</select>
	
	
</mapper>
